#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
sig_genes_df <- unique(rownames(deseq_object))
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
entrez_ids <- na.omit(mapped_ids$entrezgene_id)
# Extract the first 500 Entrez IDs
entrez_ids_subset <- entrez_ids[1:min(500, length(entrez_ids))]
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
# dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
kegg_enrich
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
sig_genes_df <- unique(rownames(deseq_object))
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
entrez_ids <- na.omit(mapped_ids$entrezgene_id)
# Extract the first 500 Entrez IDs
entrez_ids_subset <- entrez_ids[1:min(500, length(entrez_ids))]
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
sig_genes_df <- unique(rownames(deseq_object))
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids2 <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
entrez_ids <- na.omit(mapped_ids$entrezgene_id)
# Extract the first 500 Entrez IDs
entrez_ids_subset <- entrez_ids[1:min(500, length(entrez_ids))]
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# Filter for significantly differentially expressed genes using the threshold column
sig_genes_df <- deseq_df %>%
dplyr::filter(threshold == TRUE)
# sig_genes_df <- unique(rownames(deseq_object))
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# Filter for significantly differentially expressed genes using the threshold column
sig_genes_df <- deseq_df %>%
dplyr::filter(threshold == TRUE)
# sig_genes_df <- unique(rownames(deseq_object))
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df$Gene
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
entrez_ids <- na.omit(entrez_ids)
# Extract the first 500 Entrez IDs
entrez_ids_subset <- entrez_ids[1:min(500, length(entrez_ids))]
kegg_enrich <- enrichKEGG(gene = entrez_ids2,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
# dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
kegg_enrich
kegg_enrich <- enrichKEGG(gene = entrez_ids2,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
# dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
kegg_enrich
kegg_enrich <- enrichKEGG(gene = entrez_ids2,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
# kegg_enrich
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
sig_genes_df <- unique(rownames(deseq_object))
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df$Gene
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
# Extract the list of significant gene names/IDs
# ensembl_ids <- sig_genes_df$Gene
ensembl_ids <- unique(rownames(deseq_object))
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
entrez_ids <- na.omit(entrez_ids)
# Extract the first 500 Entrez IDs
entrez_ids_subset <- entrez_ids[1:min(500, length(entrez_ids))]
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
# Extract the list of significant gene names/IDs
# ensembl_ids <- sig_genes_df$Gene
ensembl_ids <- unique(rownames(deseq_object))
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
entrez_ids <- na.omit(entrez_ids)
# Extract the first 500 Entrez IDs
entrez_ids_subset <- entrez_ids[1:min(500, length(entrez_ids))]
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
# Extract the list of significant gene names/IDs
# ensembl_ids <- sig_genes_df$Gene
ensembl_ids <- unique(rownames(deseq_object))
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
# entrez_ids <- na.omit(entrez_ids)
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
# kegg_enrich
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# Filter for significantly differentially expressed genes using the threshold column
sig_genes_df <- deseq_df %>%
dplyr::filter(threshold == TRUE)
Extract the list of significant gene names/IDs
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# Filter for significantly differentially expressed genes using the threshold column
sig_genes_df <- deseq_df %>%
dplyr::filter(threshold == TRUE)
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df$Gene
# ensembl_ids <- unique(rownames(deseq_object))
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
# entrez_ids <- na.omit(entrez_ids)
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# # Filter for significantly differentially expressed genes
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
sig_genes_df <- sig_genes_df %>%
dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df$Gene
# ensembl_ids <- unique(rownames(deseq_object))
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
# entrez_ids <- na.omit(entrez_ids)
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# Filter for significantly differentially expressed genes
sig_genes_df <- deseq_df %>%
dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df$Gene
# ensembl_ids <- unique(rownames(deseq_object))
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
# entrez_ids <- na.omit(entrez_ids)
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# Filter for significantly differentially expressed genes
sig_genes_df <- deseq_df %>%
dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df$Gene
# ensembl_ids <- unique(rownames(deseq_object))
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
# entrez_ids <- na.omit(entrez_ids)
library(clusterProfiler)
library(biomaRt)  # For converting Ensembl IDs to Entrez IDs
library(clusterProfiler)
library(GenomicSuperSignature)
# Filter for significantly differentially expressed genes
sig_genes_df <- deseq_df %>%
dplyr::filter(padj < 0.05)  # Adjust threshold as needed
# # Optionally, you can also filter by log2 fold change, for example, |log2FC| > 1
# sig_genes_df <- sig_genes_df %>%
#   dplyr::filter(abs(log2FoldChange) > 1)  # Adjust threshold as needed
# # Filter for significantly differentially expressed genes using the threshold column
# sig_genes_df <- deseq_df %>%
#   dplyr::filter(threshold == TRUE)
# Extract the list of significant gene names/IDs
ensembl_ids <- sig_genes_df$Gene
ensembl_ids <- unique(rownames(deseq_object))
# Map Ensembl IDs to their associated Entrez IDs
entrez_ids <- mapIds(
org.Hs.eg.db, # Replace with annotation package for your organism
keys = ensembl_ids,
keytype = "ENSEMBL", # Replace with the type of gene identifiers in your data
column = "ENTREZID", # The type of gene identifiers you would like to map to
multiVals = "list"
)
# Check for any NA or missing values and remove them
# entrez_ids <- na.omit(entrez_ids)
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
# kegg_enrich
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
go_enrich <- enrichGO(gene = entrez_ids,
OrgDb = org.Hs.eg.db,
keyType = "ENTREZID",
pAdjustMethod = "BH",
qvalueCutoff = 0.05)
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
go_enrich <- enrichGO(gene = entrez_ids,
OrgDb = org.Hs.eg.db,
keyType = "ENTREZID",
pAdjustMethod = "BH",
qvalueCutoff = 0.05)
dotplot(go_enrich, showCategory = 10) + theme_minimal()
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
go_enrich <- enrichGO(gene = entrez_ids,
OrgDb = org.Hs.eg.db,
keyType = "ENTREZID",
pAdjustMethod = "BH",
qvalueCutoff = 0.05)
go_enrich
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
library(DOSE)
do_res <- enrichDO(gene = entrez_ids_subset, pAdjustMethod = "BH", pvalueCutoff = 0.05)
dotplot(do_res) + theme_minimal()
kegg_enrich <- enrichKEGG(gene = entrez_ids,
organism = 'hsa',  # Human genes
keyType = 'kegg',
pAdjustMethod = 'BH',  # Benjamini-Hochberg adjustment
qvalueCutoff = 0.05)  # Adjust as needed
dotplot(kegg_enrich, showCategory = 10) + theme_minimal()
library(DOSE)
do_res <- enrichDO(gene = entrez_ids, pAdjustMethod = "BH", pvalueCutoff = 0.05)
dotplot(do_res) + theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
# Attach the DESeq2 library
library(DESeq2)
# Attach the ggplot2 library for plotting
library(ggplot2)
# We will need this so we can use the pipe: %>%
library(magrittr)
# Human Annotation
library(org.Hs.eg.db)
set.seed(12345)
library(devtools)
install(devtools)
BiocManager::install("devtools")
library(devtools)
install_github("jokergoo/ComplexHeatmap")
library(devtools)
library(ComplexHeatmap)
Heatmap(scaled_data, name = "z-score",
show_column_names = FALSE,
show_row_names = TRUE,
cluster_rows = TRUE,
cluster_columns = TRUE)
library(devtools)
library(ComplexHeatmap)
gc()
library(devtools)
library(ComplexHeatmap)
