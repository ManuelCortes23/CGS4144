knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("apeglm")
install.packages("gprofiler2")
library(gprofiler2)
library(M3C)
# Attach the DESeq2 library
library(DESeq2)
# Attach the ggplot2 library for plotting
library(ggplot2)
# We will need this so we can use the pipe: %>%
library(magrittr)
# Human Annotation
library(org.Hs.eg.db)
set.seed(12345)
# Define the file path to the data directory
data_dir <- file.path("data", "SRP033566")
# Declare the file path to the gene expression matrix file
data_file <- file.path(data_dir, "SRP033566.tsv")
# Declare the file path to the metadata file
metadata_file <- file.path(data_dir, "metadata_SRP033566.tsv")
# Read in metadata TSV file
metadata <- readr::read_tsv(metadata_file)
# Read in data TSV file
expression_df <- readr::read_tsv(data_file) %>%
tibble::column_to_rownames("Gene")
# Make the data in the order of the metadata
expression_df <- expression_df %>%
dplyr::select(metadata$refinebio_accession_code)
# Check if this is in the same order
all.equal(colnames(expression_df), metadata$refinebio_accession_code)
#This will add a new column that contains the group to which the samples belong to
metadata <- metadata %>%
dplyr::mutate(Group = stringr::str_extract(refinebio_title, "^[A-Z]{3}"))
# Extract unique values of the Group column, but exclude "CTL"
unique_groups <- setdiff(unique(metadata$Group), "CTL")
# Make sure "CTL" is the first level, followed by the other unique values
ordered_levels <- c("CTL", sort(unique_groups))
# Convert the Group column to a factor with these levels
metadata <- metadata %>%
dplyr::mutate(Group = factor(Group, levels = ordered_levels))
dplyr::select(metadata, refinebio_title, Group)
# Define a minimum counts cutoff and filter the data to include
# only rows (genes) that have total counts above the cutoff
filtered_expression_df <- expression_df %>%
dplyr::filter(rowSums(.) >= 10)
gene_matrix <- round(filtered_expression_df)
ddset <- DESeqDataSetFromMatrix(
# Here we supply non-normalized count data
countData = gene_matrix,
# Supply the `colData` with our metadata data frame
colData = metadata,
# Supply our experimental variable to `design`
design = ~Group
)
deseq_object <- DESeq(ddset)
deseq_results <- results(deseq_object, contrast = c("Group", "DCM", "CTL"))
deseq_results <- lfcShrink(
deseq_object, # The original DESeq2 object after running DESeq()
coef = 2, # The log fold change coefficient used in DESeq(); the default is 2.
res = deseq_results # The original DESeq2 results table
)
head(deseq_results)
# this is of class DESeqResults -- we want a data frame
deseq_df <- deseq_results %>%
# make into data.frame
as.data.frame() %>%
# the gene names are row names -- let's make them a column for easy display
tibble::rownames_to_column("Gene") %>%
# add a column for significance threshold results
dplyr::mutate(threshold = padj < 0.05) %>%
# sort by statistic -- the highest values will be genes with
# higher expression in RPL10 mutated samples
dplyr::arrange(dplyr::desc(log2FoldChange))
head(deseq_df)
readr::write_tsv(
deseq_df,
file.path(
'results',
"SRP033566_diff_expr_results.tsv" # Replace with a relevant output file name
)
)
# We'll assign this as `volcano_plot`
# volcano_plot <- EnhancedVolcano::EnhancedVolcano(
#   deseq_df,
#   lab = deseq_df$Gene,
#   x = "log2FoldChange",
#   y = "padj",
#   pCutoff = 0.01 # Loosen the cutoff since we supplied corrected p-values
# )
# Print out plot here
# volcano_plot
# ggsave(
#   plot = volcano_plot,
#   file.path("plots/", "SRP123625_volcano_plot.png")
# ) # Replace with a plot name relevant to your data
#use the previously created DESeq object to create a PCA plot
#perform variance stabilizing transformation, correcting for size and normalization factors
vsd <- vst(deseq_object, blind=FALSE)
PCA_Plot <- plotPCA(vsd, intgroup=c("Group"))
# Print out plot here
PCA_Plot
#save the PCA plot
ggsave(
plot = PCA_Plot,
file.path("plots/", "SRP123625_pca_plot.png")
) # Replace with a plot name relevant to your data
#use the previously created DESeq object to create a tSNE plot
#perform variance stabilizing transformation, correcting for size and normalization factors
vsd <- vst(deseq_object, blind=FALSE)
tSNE_Plot <- tsne(assay(vsd),labels=as.factor(deseq_object$Group))
# Print out plot here
tSNE_Plot
ggsave(
plot = tSNE_Plot,
file.path("plots/", "SRP123625_tSNE_plot.png")
) # Replace with a plot name relevant to your data
expressed_genes <- unique(rownames(deseq_object))
gostres <- gost(query = c("GO", expressed_genes),
organism = "hsapiens", ordered_query = TRUE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE, highlight = FALSE)
expressed_genes <- unique(rownames(deseq_object))
gostres <- gost(query = c("GO", expressed_genes),
organism = "hsapiens", ordered_query = TRUE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE, highlight = FALSE)
gostplot(gostres, capped = TRUE, interactive = TRUE)
expressed_genes <- unique(rownames(deseq_object))
gostres <- gost(query = c("GO", expressed_genes),
organism = "hsapiens", ordered_query = TRUE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE, highlight = FALSE)
